#CURRENT TO-DO LIST
(put name in brackets beside it if you wanna claim it or move it to finished tasks if completed)

-Finish the use cases in the wiki list and pick who wants which ones

For each use case (let's divide them up):
  - draw on computer actor identification use case diagram (for one or all use cases(?) not sure....)
  - do the charts, basic flow and stuff like on slides 35-39 of here: https://eclass.srv.ualberta.ca/pluginfile.php/2350803/mod_resource/content/1/05-Requirements.pdf
  - write up the mock junit tests (the one's that aren't finished already)
        "It should show the intent of the code to implement the use case. 
        Test values, smoke tests are not enough."

- Storyboard of ONE user scenario and main UI:
    Diagram the layout of your main user interface and major dialogs, with comments describing the important elements. 
    one storyboard sequence for a non-trivial but coherent scenario of using your application, with transitions between 
    different states of the user interface, caused by the user manipulating the controls or providing input. 
    Enter this information in your team wiki.
    
- Separate Use cases into milestone timelines in the wiki

- Individual task and peer review form (EVERYONE NEEDS TO DO ONE)

Finished Tasks:
-Glossary (may need updating as we go):
    The glossary entries should specify sources that are relevant to the domain of your application. 
    For example, your definition of "user" should come from some external source, 
    such as a reference (e.g. a dictionary) or well-known technology (e.g. amazon.com) 
    that defines the term and that external source should not be discussing drug users,
    because that would be irrelevant to the domain of your app.
    
-license our code (hindle recommended to me(Falon) to use GPL3: http://www.gnu.org/licenses/gpl-howto.html)
        **Make sure the license header is in every java file we have
