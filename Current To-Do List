#CURRENT TO-DO LIST
(put name in brackets beside it if you wanna claim it or move it to finished tasks if completed)

For each use case (DIVIDED IN THE GOOGLE DOC SHARED IN EMAIL AND ON SLACK):
  - do the google doc we started with content like on slides 35-39 of here: https://eclass.srv.ualberta.ca/pluginfile.php/2350803/mod_resource/content/1/05-Requirements.pdf
  
  *** DO THIS AFTER USE CASES AND TRY AND FORMAT FORMAT ALREADY STARTED WITH TEST CASES
  - write up the mock junit tests (the one's that aren't finished already)
        "It should show the intent of the code to implement the use case. 
        Test values, smoke tests are not enough."

- Storyboard of ONE user scenario (NOAH TOMORROW):
    one storyboard sequence for a non-trivial but coherent scenario of using your application, with transitions between 
    different states of the user interface, caused by the user manipulating the controls or providing input. 
    
-main UI: (COLE) 
    Diagram the layout of your main user interface and major dialogs, with comments describing the important elements. 
    Enter this information in your team wiki.
    
Release Planning: (WE HAVE DETAILED MILESTONES DONE ON WIKI NEED TO PUT USE CASES IN THEM)
    Plan the major use cases and user stories that need to be done for project part 4, 
    and what will be deferred until later for project part 5. This plan will likely evolve 
    and should be maintained up-to-date in your team wiki. This will be used to help track 
    progress on completing the requirements.

Finished Tasks:
-Glossary (may need updating as we go): (FALON CAN FIX THIS UP AND MAKE IT COMPLETE)
    The glossary entries should specify sources that are relevant to the domain of your application. 
    For example, your definition of "user" should come from some external source, 
    such as a reference (e.g. a dictionary) or well-known technology (e.g. amazon.com) 
    that defines the term and that external source should not be discussing drug users,
    because that would be irrelevant to the domain of your app.
    
-Finish the use cases in the wiki list and pick who wants which ones (see google doc for labour split)
 
-license our code (hindle recommended to me(Falon) to use GPL3: http://www.gnu.org/licenses/gpl-howto.html)
        **Make sure the license header is in every java file we have
